---
apiVersion: batch/v1
kind: Job
metadata:
  name: backup-job
spec:
  template:
    spec:
      containers:
      - name: backup-job
        image: postgres:${POSTGRES_JOB_VERSION}
        command: ["/bin/bash"]
        args:
          - -c
          - |
            export TIMESTAMP=$(date "+%Y-%m-%d_%H-%M-%S");
            echo "wif_$TIMESTAMP.dump" > /data/LATEST;
            pg_dumpall -c -h wif-bo-prod-pg-postgresql -U wifbo > /data/wif_$TIMESTAMP.dump;
            echo "backup wif_$TIMESTAMP.dump completed";
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 100
            memory: 200Mi
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: wif-bo-secret
              key: DB_PASSWORD
        volumeMounts:
        - mountPath: "/data"
          name: volume
      restartPolicy: OnFailure
      volumes:
        - name: volume
          azureFile:
            secretName: azure-storage
            shareName: work-in-france-backup-restore
            readOnly: false
      initContainers:
        - name: wait-for-postgres
          image: postgres:${POSTGRES_JOB_VERSION}
          imagePullPolicy: Always
          resources:
            requests:
              cpu: 5m
              memory: 16Mi
            limits:
              cpu: 20m
              memory: 32Mi
          command:
            - sh
            - -c
            - |
              retry=120; # 5s * (12 * 10) = 10min
              while ! pg_isready -h wif-bo-prod-pg-postgresql > /dev/null 2> /dev/null && [[ $(( retry-- )) -gt 0 ]];
                do
                  echo "Waiting for Postgres to go Green ($(( retry )))" ; sleep 5s ; done ;
              echo Ready;
...
