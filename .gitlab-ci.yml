---
include:
  - project: SocialGouv/gitlab-ci-yml
    file: /base_yarn_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_create_namespace_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_register_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_docker_kubectl_image_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_deploy_hpa_chart_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_notify_github_stage.yml
    ref: v4.6.0
  - project: SocialGouv/gitlab-ci-yml
    file: /base_docker_helm_image_stage.yml
    ref: v4.6.0
#  - "/k8s/api/.deploy-wif-bo-api.yml"
#  - "/k8s/postgres/.deploy-wif-bo-postgres.yml"
#  - "/k8s/memcached/.deploy-wif-bo-memcached.yml"
#  - "/k8s/kinto/.deploy-wif-bo-kinto.yml"

variables:
  PROJECT: work-in-france-backoffice
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  IMAGE_INFRA_BASE_NAME: "infra/images-docker"
  DEV_ENVIRONMENT_NAME: "wif-dev"
  PROD_ENVIRONMENT_NAME: "prod"
  # Docker Image Version
  DOCKER_VERSION: "18.06"
  NODE_VERSION: "10"
  CURL_VERSION: "7.67.0"
  HELM_VERSION: "0.20.0"
  KUBECTL_VERSION: "0.7.0"
  KINTO_VERSION: "13.1.1"
  MEMCACHED_VERSION: "1.5.12-alpine"
  POSTGRES_VERSION: "11-debian-9"
  POSTGRES_JOB_VERSION: "11-alpine"
  # Helm Chart Version
  POSTGRES_CHART_VERSION: "6.5.6"
  MEMCACHED_CHART_VERSION: "3.1.0"
  # Ports
  API_PORT: 4000
  KINTO_PORT: 8888
  POSTGRES_PORT: 5432
  MEMCACHED_PORT: 11212
  # Quotas api
  API_RESOURCE_CPU_LIMIT: "50m"
  API_RESOURCE_MEMORY_LIMIT: "96Mi"
  API_RESOURCE_CPU_REQUEST: "5m"
  API_RESOURCE_MEMORY_REQUEST: "80Mi"
  # Quotas Kinto
  KINTO_RESOURCE_CPU_LIMIT: "100m"
  KINTO_RESOURCE_MEMORY_LIMIT: "160Mi"
  KINTO_RESOURCE_CPU_REQUEST: "10m"
  KINTO_RESOURCE_MEMORY_REQUEST: "128Mi"
  # Quotas job init Kinto
  INIT_KINTO_RESOURCE_CPU_LIMIT: "20m"
  INIT_KINTO_RESOURCE_MEMORY_LIMIT: "16Mi"
  INIT_KINTO_RESOURCE_CPU_REQUEST: "10m"
  INIT_KINTO_RESOURCE_MEMORY_REQUEST: "8Mi"
  # Quotas Memcached
  MEMCACHED_RESOURCE_CPU_LIMIT: "50m"
  MEMCACHED_RESOURCE_MEMORY_LIMIT: "64Mi"
  MEMCACHED_RESOURCE_CPU_REQUEST: "10m"
  MEMCACHED_RESOURCE_MEMORY_REQUEST: "32Mi"
  POSTGRES_RESOURCE_CPU_LIMIT: "50m"
  POSTGRES_RESOURCE_MEMORY_LIMIT: "256Mi"
  POSTGRES_RESOURCE_CPU_REQUEST: "25m"
  POSTGRES_RESOURCE_MEMORY_REQUEST: "128Mi"

stages:
  - "Code Quality"
  - "Prepare"
  - "Registration"
  - "Deploy"
#  - "Send Url to GitHub"
#  - "Delete K8S objects"


.resolve_env: &resolve_env |-
  set -x

  export BRANCH_NAME=${BRANCH_NAME:=$CI_COMMIT_REF_SLUG}
  export HASH_SIZE=${HASH_SIZE:=7}
  export K8S_PROJECT=${K8S_PROJECT:=$PROJECT}
  BRANCH_NAME_HASHED=$( printf "${BRANCH_NAME}" | sha1sum | cut -c1-${HASH_SIZE} )
  export BRANCH_HASH=${BRANCH_HASH:="$BRANCH_NAME_HASHED"}
  export K8S_NAMESPACE="${PROJECT}-feature-${BRANCH_HASH}"


  if [[ -n $PRODUCTION ]]; then
    export BRANCH_HASH=prod
    export IMAGE_TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
    export K8S_NAMESPACE="${PROJECT}"
    export DOMAIN="prod.${PROJECT}.fabrique.social.gouv.fr"

  elif [[ "${BRANCH_NAME}" = "master" ]]; then
    export BRANCH_HASH=master
    export IMAGE_TAG=${CI_COMMIT_SHA}
    export K8S_NAMESPACE="${PROJECT}-${BRANCH_HASH}"
    export DOMAIN="${PROJECT}-master.dev.fabrique.social.gouv.fr"

  elif [[ -n "${CI_COMMIT_TAG}" ]]; then
    export BRANCH_HASH=preprod;
    export IMAGE_TAG=$(printf "${CI_COMMIT_TAG}" | sed "s/^v//")
    export K8S_NAMESPACE="${PROJECT}-${BRANCH_HASH}"
    export DOMAIN="${PROJECT}-preprod.dev.fabrique.social.gouv.fr"

  else
    export IMAGE_TAG=${CI_COMMIT_SHA}
    export DOMAIN="${BRANCH_HASH}-${PROJECT}.dev.fabrique.social.gouv.fr"
  fi

  export HOST="${DOMAIN}"

  set +x

before_script:
  - *resolve_env


################################ CODE QUALITY ###############################

Code quality:
  stage: Code Quality
  extends:
    - .base_yarn_quality
    - .base_yarn_build
  when: manual
  except:
    variables:
      - $PRODUCTION
  allow_failure: false


################################ PREPARE ####################################


Create namespace:
  stage: Prepare
  extends: .base_create_namespace_stage
  except:
    variables:
      - $PRODUCTION


################################ REGISTRATION ################################

.register_stage: &register_stage
  extends: .base_register_stage
  stage: Registration
  except:
    variables:
      - $PRODUCTION

#
Register api image:
  <<: *register_stage
  variables:
    CONTEXT: .
    DOCKER_BUILD_ARGS: -f packages/api/Dockerfile
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/api

Register init kinto image:
  <<: *register_stage
  variables:
    CONTEXT: packages/kinto
    DOCKERFILE_PATH: packages/kinto/Dockerfile
    IMAGE_NAME: ${CI_REGISTRY_IMAGE}/kinto

################################# DEPLOY ###############################

Notify Starting Deployment:
  extends: .base_notify_pending_stage
  stage: Deploy

#

.deploy_with_hpa_chart: &deploy_with_hpa_chart
  stage: Deploy
  extends: .base_deploy_hpa_chart_stage
  dependencies: []
  variables: &deploy_with_hpa_chart_variables
    REGISTRY: $CI_REGISTRY_IMAGE
#

############################################
####                API                 ####
############################################

Deploy api:
  <<: *deploy_with_hpa_chart
  variables:
    <<: *deploy_with_hpa_chart_variables
    CONTEXT: api
    PORT: ${API_PORT}
    VALUES_FILE: ./k8s/api.values.yml
  environment:
    name: ${DEV_ENVIRONMENT_NAME}
  except:
    variables:
      - $PRODUCTION

Deploy api (prod):
  <<: *deploy_with_hpa_chart
  variables:
    <<: *deploy_with_hpa_chart_variables
    CONTEXT: api
    PORT: ${API_PORT}
    VALUES_FILE: ./k8s/api.values.yml
    API_RESOURCE_CPU_LIMIT: "250m"
    API_RESOURCE_MEMORY_LIMIT: "256Mi"
    API_RESOURCE_CPU_REQUEST: "5m"
    API_RESOURCE_MEMORY_REQUEST: "16Mi"
  environment:
    name: ${PROD_ENVIRONMENT_NAME}
  only:
    refs:
      - triggers
    variables:
      - $PRODUCTION

#
############################################
####            DEPLOY TO K8S            ###
############################################
#
##
#.deploy_stage: &deploy_stage
#  stage: "Deploy"
#  dependencies: []
#  variables: &deploy_stage_variables
#    WIF_BO_REGISTRY: $CI_REGISTRY_IMAGE
#    IMAGE_TAG: $CI_COMMIT_SHA
##
#
## Dev Environment
#
#Deploy @wif-bo/api (dev):
#  <<: *deploy_stage
#  extends: .deploy-wif-bo-api-k8s-dev
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $API_PORT
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  except:
#    - master
#
#Deploy @wif-bo/postgres (dev):
#  <<: *deploy_stage
#  extends: .deploy-wif-bo-postgres-k8s-dev
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $POSTGRES_PORT
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  except:
#    - master
#
#Deploy @wif-bo/memcached (dev):
#  <<: *deploy_stage
#  extends: .deploy-wif-bo-memcached-k8s-dev
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $MEMCACHED_PORT
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  except:
#    - master
#
#Deploy @wif-bo/kinto (dev):
#  <<: *deploy_stage
#  extends: .deploy-wif-bo-kinto-k8s-dev
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $KINTO_PORT
#    CACHE_PORT: $MEMCACHED_PORT
#  environment:
#    name: $DEV_ENVIRONMENT_NAME
#  except:
#    - master
#
## Prod Environment
#
#Deploy @wif-bo/api (prod):
#  <<: *deploy_stage
#  extends: .deploy-wif-bo-api-k8s-prod
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $API_PORT
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags
#
#Deploy @wif-bo/memcached (prod):
#  <<: *deploy_stage
#  extends: .deploy-wif-bo-memcached-k8s-prod
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $MEMCACHED_PORT
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags
#
#Deploy @wif-bo/kinto (pro):
#  <<: *deploy_stage
#  extends: .deploy-wif-bo-kinto-k8s-prod
#  variables:
#    <<: *deploy_stage_variables
#    PORT: $KINTO_PORT
#    CACHE_PORT: $MEMCACHED_PORT
#  environment:
#    name: $PROD_ENVIRONMENT_NAME
#  only:
#    - tags
#
